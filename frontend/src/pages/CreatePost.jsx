import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'

import { FormField, Loader } from '../components'
import { getRandomPrompt } from "../utils"

const CreatePost = () => {

	const navigate = useNavigate()
	const [form, setForm] = useState({
		name: "",
		prompt: "",
		photo: ""
	})
	const [generatingImg, setGeneratingImg] = useState(false)
	const [loading, setLoading] = useState(false)
	const OCTOAI_API_KEY = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNkMjMzOTQ5In0.eyJzdWIiOiIyOTc5Mzc3YS1kODJiLTQ4NzctYjc2Mi0xZDc3M2I0OWM4ZjAiLCJ0eXBlIjoidXNlckFjY2Vzc1Rva2VuIiwidGVuYW50SWQiOiI1YzJjOGZiMS0zYzM1LTQ0Y2MtYjIzNC0yYmM5ZmFhNTVkMTkiLCJ1c2VySWQiOiI5NGYwZmQ5Ni1hZmZmLTQ2YTUtOTQ3Ni1hY2UwZThhOTBkYzMiLCJyb2xlcyI6WyJGRVRDSC1ST0xFUy1CWS1BUEkiXSwicGVybWlzc2lvbnMiOlsiRkVUQ0gtUEVSTUlTU0lPTlMtQlktQVBJIl0sImF1ZCI6IjNkMjMzOTQ5LWEyZmItNGFiMC1iN2VjLTQ2ZjYyNTVjNTEwZSIsImlzcyI6Imh0dHBzOi8vaWRlbnRpdHkub2N0b21sLmFpIiwiaWF0IjoxNzAyNjU4MTY5fQ.Yd8DHj1adkjxUMcaJN3eUl5ov1o0Xt_YkWgZsPVEolfRNPgw6ofmCnbzJkgfClmoEm7UCBUad8tvYa1NiBxTh-e_zhfFCm3-pBGy8mk68pYi_McEbmSs8QqBVHDd2AbnbD7XIqbti8Cmo8IM1bEb1gMmyqxCphyMikVUKySv-5OOOqxsh_OBqPJiZ1a5N789Kdm0QtWdV6aPzw-wKazUqzRajbjoS7SJ1pKt-EWDjNHuP_1SKK5a9Rs6en-A6tPoMWkweDVIRLP9Uw9oTyhA-wxEzFFzE5cbncHpXylJTD3zNrnWd5hS2icYbcJ5bhybcR_bpSFR3wpub4Rn5xjtyg"

	const generateImage = async () => {
		if (form.prompt) {
			try {
				setGeneratingImg(true)
				await fetch("https://image.octoai.run/generate/sdxl", {
					method: 'POST',
					headers: {
						"Content-Type": "application/json",
						"Authorization": "Bearer " + OCTOAI_API_KEY
					},
					body: JSON.stringify({ prompt: form.prompt }),
					redirect: 'follow'
				})
					.then(response => response.json())
					.then(result => setForm({ ...form, photo: `data:image/jpeg;base64,${result.images[0].image_b64}` }))
					.catch(error => console.log('error', error));
				// const response = await fetch("https://midjourney-2-0.onrender.com/api/v1/dalle", {
				// 	method: "POST",
				// 	headers: {
				// 		"Content-Type": "application/json"
				// 	},
				// 	body: JSON.stringify({ prompt: form.prompt })
				// })
				// const data = await response.json()
				// setForm({ ...form, photo: `data:image/jpeg;base64,${data.photo}` })
			} catch (error) {
				alert(error)
			} finally {
				setGeneratingImg(false)
			}
		}
		else {
			alert("Please enter a prompt");
		}
	}

	const handleSubmit = async (e) => {
		e.preventDefault();

		if (form.prompt && form.photo) {
			setLoading(true)

			try {
				const response = await fetch("https://midjourney-2-0.onrender.com/api/v1/post", {
					method: "POST",
					headers: {
						"Content-Type": "application/json"
					},
					body: JSON.stringify(form)
				})

				await response.json()
				navigate("/")
			} catch (error) {
				alert(error)
			} finally {
				setLoading(false)
			}
		}
		else {
			alert("Please enter a prompt and generate an image")
		}
	}

	const handleChange = (e) => {
		setForm({ ...form, [e.target.name]: e.target.value })
	}

	const handleSurpriseMe = () => {
		const randomPromt = getRandomPrompt(form.prompt)
		setForm({ ...form, prompt: randomPromt })
	}

	return (
		<section className='max-w-7xl mx-auto'>
			<div>
				<h1 className='font-extrabold text-[#222328] text-[32px]'>Create</h1>
				<p className='mt-2 text-[#666e75] text-[16px] max-w-[500px]'>Create imagenative and visually stunning images generated by DALL-E AI and share them with the community</p>
			</div>

			<form className='mt-16 max-w-3xl' onSubmit={handleSubmit}>
				<div className='flex flex-col gap-5'>
					<FormField
						labelName="Your Name"
						type="text"
						name="name"
						placeholder="John Doe"
						value={form.name}
						handleChange={handleChange}
					/>
					<FormField
						labelName="Prompt"
						type="text"
						name="prompt"
						placeholder="panda mad scientist mixing sparkling chemicals, digital art"
						value={form.prompt}
						handleChange={handleChange}
						isSurpriseMe
						handleSurpriseMe={handleSurpriseMe}
					/>

					<div className='relative bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 w-64 p-3 h-54 flex justify-center items-center'>
						{form.photo ? (
							<img src={form.photo} alt={form.prompt} className='w-full h-full object-contain' />
						) : (
							<svg
								fill="currentColor"
								className='w-9/12 h-9/12 object-contain opacity-40'
								viewBox="0 0 16 16"
							>
								<path d="M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0" />
								<path d="M1.5 2A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2zm13 1a.5.5 0 0 1 .5.5v6l-3.775-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12v.54A.505.505 0 0 1 1 12.5v-9a.5.5 0 0 1 .5-.5z" />
							</svg>
						)}

						{generatingImg && (
							<div className='absolute inset-0 z-0 flex justify-center items-center bg-[rgba(0,0,0,0.5)] rounded-lg'>
								<Loader />
							</div>
						)}
					</div>
				</div>
				<div className='mt-5 flex gap-5'>
					<button type='button' onClick={generateImage} className='text-white bg-green-700 font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center'>
						{generatingImg ? "Generating..." : "Generate"}
					</button>
				</div>

				<div className='mt-10'>
					<p className='mt-2 text-[#666e75] text-[14px]'>Once you have created the image you want, you can share it with the community</p>
					<button type="submit" className='mt-3 text-white bg-[#6464ff] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center'>
						{loading ? "Sharing..." : "Share with the community"}
					</button>
				</div>
			</form>
		</section >
	)
}

export default CreatePost